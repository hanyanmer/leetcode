思路1：将给的字符串扫描一遍并存入到二维数组中，然后再输出二维数组，再存入数组中列为题中给的行数numRows-1的倍数或者行数+列取余给定行数
和numRows-1相同时，给数组中赋值，使用数组浪费空间
执行用时：53 ms, 在所有 Java 提交中击败了9.83%的用户
内存消耗：40.3 MB, 在所有 Java 提交中击败了8.33%的用户
思路2：
思路1代码如下：
class Solution {
    public String convert(String s, int numRows) {

        //只有一行的时候，直接放回字符串
        if(numRows==1){
            return s;
        }
        int len = s.length();
        //每一个|/需要多少个字符 2 *numRows -2
        int single = 2*numRows-2;
        //一共有多少个|/,同时这个三角形存储在数组中需要多少列*(numRows-1)
        int num = (numRows-1)*(len/single);
        int left = len%single ;
        if(left >0){
            num ++;
            //如果余数大于行数
            if(left > numRows){
                num +=left-numRows;
            }
        }
        char [] sChar = s.toCharArray();
        //开辟的数组
        char [][] arr = new char[num][];
        int index = 0;
        //先列后行
        for(int i =0;i<num;i++){
            //然后执行每一行
            arr[i]=new char[numRows];
            for(int j= 0;j<numRows;j++){
                //行的整数倍； 列取余+行 = numRows-1
                if((i%(numRows-1)==0) || (i%(numRows-1)+j)==(numRows-1)){
                    if(index<len){
                        arr[i][j]=sChar[index];
                        index++;
                    } else {
                        break;
                    }
                }
            }
        }
        StringBuilder as = new StringBuilder();

        //得到数组,并格式输出
        for(int i =0;i<numRows;i++){
            for(int j=0;j<num;j++){
                if(j%(numRows-1)==0 || j%(numRows-1)+i==(numRows-1)){
                    if(arr[j][i]!='\0'){
                        as.append(arr[j][i]);
                    }
                }
            }
        }
        return as.toString();
    }
    
}

思路2代码如下：
