public class MergeSort {
    //两路归并算法，两个排好序的子序列合并为一个子序列
    public static void merge(int[] a, int left , int mid ,int right){
        //临时数组用来存放 左边和右边进行比较后的有序的值
        int[] tmp = new int[a.length];
        //p1代表左半部分 p2代表右半部分  k代表临时数组的下标
        int p1 = left,p2 = mid + 1 ,k = left;
        
        //比较 ，如果左半部分或者右半部分里面还有元素的话，就继续执行
        while(p1<=mid && p2<=right){
            //如果左半部分中的元素值 小于右半部分的元素值
            if(a[p1]<=a[p2])
                //哪个小就被比下去存在了tmp 数组中，左边小， 然后左半部分往后移动一个
                tmp[k++]=a[p1++];
            else
                tmp[k++]=a[p2++];
        }
        //如果左边序列未检测完，直接将后面所有元素放在后面
        while(p1<=mid) tmp[k++]=a[p1++];
        //如果右边序列未检测完，直接将后面所有元素放在后面
        while(p2<=right) tmp[k++]=a[p2++];
        //复制回原数组
        for(int i = left;i<=right;i++)
            a[i]=tmp[i];
    }

    public static void mergeSort(int[] a, int start, int end){
        if(start < end){
            //划分子序列
            int mid = (start+end)/2;
            //对左侧子序列进行归并排序
            mergeSort(a,start,mid);
            //对右侧子序列进行归并排序
            mergeSort(a,mid+1,end);
            //合并
            merge(a,start,mid,end);
        }
    }

    public static void main(String[] args) {
        int[] a = { 49, 38, 65, 97, 76, 13, 27, 50 };
        mergeSort(a, 0, a.length-1);
        System.out.println("排好序的数组：");
        for (int e : a)
            System.out.print(e+" ");
    }
}
