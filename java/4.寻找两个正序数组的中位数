思路：
想法一：采用归并的方法将两个数组进行合并，然后找到中位数，但是时间复杂度是o(m+n)空间复杂度也是o(m+n)
想法二：不进行排序，只要找到中位数所在的位置的元素值就可以了，因为两个数组长度已知所以元素位置可以知道。使用两个指针分别在两个数组中进行扫描，
        初始值都是用指针从0位置开始，两个指针所指的位置的值进行比较，哪个小哪个的指针往后移动一位，直到到达中位数的位置
        时间复杂度是o(m+n) 空间复杂度是o(1) 还是不能满足本题log级别的时间复杂度。
由此想到log级别的算法有：二分，所以对想法二进行改进，在查找位置的时候采用二分查找
假设K为我所要找的中位数的位置，那么执行完一次二分我就将要查找的范围减少了 k/2 个


public class MedianOfTwoSortedArrays {
    public double findMedianSortedArrays(int[] nums1,int[] nums2){
        int len1 = nums1.length, len2 = nums2.length;
        int totallen = len1+len2;
        if(totallen%2==1){
            int midIndex = totallen/2;
            double median = getElement(nums1,nums2,midIndex+1);
            return median;
        }else{
            int midIndex1 = totallen/2-1,midIndex2 = totallen/2;
            double median = ((getElement(nums1,nums2,midIndex1+1))+(getElement(nums1,nums2,midIndex2+1)))/2.0;
            return median;
        }
    }

    //找到中位数的值
    
    /**
     * 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较
     * nums1 中<=pivot1 的元素有 nums1[0 .. k/2-2] 共 k/2-1 个;nums2 中<=pivot2 的元素有 nums2[0 .. k/2-2] 共k/2-1 个
     * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个
     * 这样 pivot 本身最大也只能是第 k-1 小的元素
     * 分成三个主要的过程分支
     * 1.nums1[k/2-1] < nums2[k/2-1]  删除nums1 中0~~~k/2-1 个元素值，同时索引值增加
     * 2.nums1[k/2-1] > nums2[k/2-1]  删除nums2 中0~~~k/2-1 个元素值，同时索引值增加
     * 3.nums1[k/2-1] = nums2[k/2-1]  执行和1 一样
     * 注意：在进行删除了一些元素后，这些元素都比K小，删除后要修改K的值 
     */
    /**
     *注意的三点
     * 1.k/2-1越界的话，选取数组中的最后一个元素，
     * 2.执行完一次后 k = k-k/2
     * 3.k = 1 为终止条件，返回两个数组中最小值即可
     *
     */

    public int getElement(int [] nums1,int [] nums2,int k){
        int len1 = nums1.length, len2 = nums2.length;
        //两个数组的下标索引值
        int index1 = 0, index2 = 0;
        int elem = 0;

        while(true){
            //边界情况
            //数组nums1 为空了
            if(index1==len1){
                return nums2[index2+k-1];
            }
            if(index2==len2){
                return nums1[index1+k-1];
            }
            //k = 1 为终止条件，返回两个数组中最小值即可
            if(k==1){
                return Math.min(nums1[index1],nums2[index2]);
            }

            //正常情况
            int half = k/2;
            //如果k/2-1越界的情况，选最后一个元素所在的位置
            int newIndex1 = Math.min(index1+half,len1)-1;
            int newIndex2 = Math.min(index2+half,len2)-1;
            int pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];
            if(pivot1<pivot2){
                //执行完一次后  k = k-k/2
                k-=(newIndex1 - index1 +1);
                //数组重新的起始位置
                index1 = newIndex1+1;
            } else{
                k-=(newIndex2 -index2 +1);
                index2 = newIndex2+1;
            }
        }

    }

    public static void main(String[] args) {
        MedianOfTwoSortedArrays m = new MedianOfTwoSortedArrays();
        int [] nums1 = {1,3};
        int [] nums2 = {2};
        System.out.println(m.findMedianSortedArrays(nums1,nums2));;
    }
}

