public class BinarySearch {
    //二分查找是在有序的数组上进行查找，如果找到就返回元素所在位置，找不到返回-1
    //普通的二分,[0,length-1],左闭 右闭，普通的二分好处是：在进行扫描的时候不用担心数组越界
    public static int binarySearch(int [] arr,int target){
        int left = 0, right = arr.length-1;
        while(left<=right) {  //这个位置注意，因为[2,2] 这个集合里还是有一个元素的，
            int mid = left+(right-left)/2; //位置防止 取值的时候发生溢出
            if(arr[mid]==target)
                return mid ;
            else if(arr[mid]<target)  //判断条件要注意：每一个条件都要写清晰 我这个分支是干嘛的
                left = mid + 1;
            else if(arr[mid]>target)
                right = mid -1;
        }
        return arr[left]==target? left:-1;
    }

    //寻找左边界的二分，当有多个相同值元素的时候，返回 最左边元素所在位置，
    // 如：1 2 2 3 找到2的位置，返回值为1
    //查找的范围是[0,length)，左闭，右开
    public int leftBound(int [] arr , int target){
        int left = 0,right = arr.length;
        while(left <right){  //这个地方要注意，因为[2,2) 这个集合已经不包含任何元素了
            int mid = left +(right-left)/2;
            if(arr[mid]==target)
                right=mid;  //这个地方注意，向左趋近
            else if(arr[mid]<target)
                left=mid+1;
            else if(arr[mid]>target)
                right=mid;  //这个地方注意，因为要满足每次查找的范围是[) ,
        }
//        return left;
        if(left==arr.length)
            return -1;
        return arr[left]==target?left:-1;
    }

    //寻找右边界的二分，当有多个相同值元素的时候，返回 最右边元素所在的位置
    //如：1 2 2 3 找到2的位置 返回值为2
    //查找的范围是[0,length)，左闭，右开
    public int rightBound(int [] arr, int target){
        int left = 0, right = arr.length;
        while(left<right){  //这个地方注意
            int mid = left+(right-left)/2;
            if(arr[mid]==target)
                left = mid+1 ;  //这个地方注意，是向右趋近
            else if(arr[mid]<target)
                left = mid-1;  //没变，为了保持左闭右开
            else if(arr[mid]>target)
                right =mid;  //没变，为了保持左闭右开
        }
        if(left==0) return -1;
        return arr[left-1]==target? (left-1):-1; //返回的是left-1
    }

    public static void main(String[] args) {
        BinarySearch b = new BinarySearch();
        int [] arr = {0,1,2,3,3,4,5,6,7};
        System.out.println(        b.rightBound(arr, 3));
    }
}
